Defiintion file for all grammars

{...} => special result => empty, vector
<...> => keyword, symbol
;	  => comments

============= Expression =============

Goal   -> Expr

Expr        -> CompareExpr ; external alias
CompareExpr -> LogicExpr CompareExpr'
CompareExpr'-> <==> LogicExpr CompareExpr' | <<>> LogicExpr CompareExpr' | {empty}
LogicExpr   -> ExprArith LogicExpr'
LogicExpr'  -> <&&> ExprArith LogicExpr' | <||> ExprArith LogicExpr' | {empty}
ExprArith   -> Term ExprArith'
ExprArith'  -> <+> Term ExprArith' | <-> Term ExprArith' | {empty}
Term        -> Factor Term'
Term'       -> <*> Factor Term' | <%> Factor Term' | {empty}
Factor      -> <!> Factor' | Factor'
Factor'     -> <(> LogicExpr <)> | {num} | {name}

============= Indentifier =============

Goal        -> Id

Id          -> {name} Id' Arr Chain
Func        -> <(> {vector}Expr <)> | {empty}
Arr         -> <[> {vector}Expr <]> Arr | {empty}
Chain       -> <.> Id | {empty}

============= Statement =============

Stmt = If | ...

============= Statement - If =============

Goal   -> If
If     -> <if> Expr <{> {vector}Stmt <}> If'
If'    -> <else> If | <else> Else | {empty}
Else   -> <{> {vector}Stmt <}>

============= Statement - Define =============
Auto auto; => TODO

============= Statement - Assign =============
Auto auto = 2 => TODO
auto = 2 => TODO

============= Statement - While =============
============= Statement - Do while =============
============= Statement - Func call =============